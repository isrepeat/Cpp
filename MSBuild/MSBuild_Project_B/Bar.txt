Resource Acquisition Is Initialization (RAII)
R-value, L-value

class Object {
public:
  Object() {}
  ~Object() {}

private:
  std::vector<int> vec;
};


Remarks trainee [Denys Yaroshenko]:
- Нет заливки кода долгое время, поэтому сложно понять прогресс стажеровки и давать какие-либо советы.


Remarks trainee [Denys Yaroshenko]:


[1][VadimChystikov]
Из минусов по коду:
- Работа с raw pointers.
- Есть утечка при создании звука.
- Рандомное удаление из вектора (правильнее использовать list).
- Использование "include guard" вместо #pragma once.
- В коде встречаются магические числа (правильнее было бы использовать enum), есть дублирование.
- Вся логика находится в 1 классе. Можно было распределить код по классам и использовать наследование или композицию.
- Не была продемонстрирована возможность использования виртуальных функций, RAII, лямбда функций.
- В проекте нет использования механизма Qt сигналов\слотов.

Рекомендую почитать про:
- Smart pointers и идиому RAII.
- Виртуальные функции и наследование.
- Какие контейнеры стандартной библиотеки для чего больше подходят.
- Механизм сигналов\слотов в Qt.


[2][AlexandrMykhailychenko]
Плюсы:
- Есть базовые знания ООП, о том как создаются объекты.
- Понимание что такое конструктор/деструктор, что такое утечка и разница между стеком/кучей и ссылкой/указателем.

Минусы:
- Плохое понимание полиморфизма, виртуальных функций.
- Плохое представление о том как работают исключения.
- Незнание семантики перемещения, операторов преобразования, когда вызывается конуструктор копирования.
- Незнание возможностей стандартной библиотеки.

Нужно почитать про:
- Виртуальные функции, таблица виртуальных функций при наследовании.
- Конструктор копирования/перемещения.
- Операторы преобразования.
- Обрезку обьектов.
- Раскрутку стека.
- Возможности стандартной библиотеки.
- Умные указатели.
- Этапы компиляции.

Рекомендуемые книги:
Стивен Пратта. Язык программирования С++. Лекции и упражнения, 5-е изд.
Скот Майерс. Эффективный и современный c++.


[2][AlexandrMykhailychenko new]
Плюсы:
- Есть базовые знания ООП, о том как создаются объекты.
- Понимание что такое конструктор/деструктор, что такое утечка и разница между стеком/кучей и ссылкой/указателем.

Нужно лучше выучить:
- Понимание полиморфизма, виртуальных функций. Как ведет себя таблица виртуальных функций при наследовании.
- Умные указатели, cемантику перемещения.
- Операторы преобразования, обрезку обьектов, когда вызывается конуструктор копирования.
- Механизм работы исключений, раскрутку стека.
- Возможности стандартной библиотеки.
- Этапы компиляции.

Рекомендуемые книги:
Стивен Пратта. Язык программирования С++. Лекции и упражнения, 5-е изд.
Скот Майерс. Эффективный и современный c++.


[4][Mykyta Shcherbatiuk]
Минусы:
- Хранение чистых указателей в векторе
- Много где используется чистые указатели на qt классы которым не передается родитель, из-за чего будет утечка.
- Нет ключевого слова override/final или virtual в переопределенных методах (из-за чего из кода нельзя понять какой наследуемый метод был виртауальный)
- Логика игрока и дилера написана так, что часто используется сравнение адресов обьектов для определения типа. Для этого как минимум есть оператор dynamic_cast, но лучше пользоваться виртуальными методами.
- Непонятно зачем определять только лишь деструктор виртуальным и по итогу не использовать эту возможность в коде.
- В классе Game создается экземпляр Sound, который написан типа как singleton, но используется в других классах. Получается зависимость между статическими методами и инициализацией синглтона (нельзя вызывать методы пока не будет создан экземпляр). К примеру если где-то в каком-то файле забыть создать экземпляр Sound, то приложение упадет.


[3][Vitaly Teresevichus]
Код выглядит неплохо. Небыли продемонстрированы знания наследования и полиморфизма, так же в коде практически нет использования стандартной библиотеки.
Советую почитать любые книги c++ про ООП.


[5][Vladislav Zinchenko]
Минусы по коду:
- Большинство классов не разделены на обьявление и реализацию.
- Использование глобальных переменных.
- Используются сравнения указателей.
- Нет наследования с полиморфизмом.
- Нет умных указателей, используется явное выделение памяти.
- Нет использования стандартной библиотеки.
- Практически не использовался механизм Qt сигналов\слотов.
- Много дублирования.

Рекомендую почитать про:
- Smart pointers и идиому RAII.
- Виртуальные функции и наследование.
- Контейнеры стандартной библиотеки и лямбда функции.
- Механизм сигналов\слотов в Qt.

Рекомендуемые книги:
Стивен Пратта. Язык программирования С++. Лекции и упражнения, 5-е изд.
Скот Майерс. Эффективный и современный c++.


[6][PANASUK YEHOR]
Минусы по коду:
- Очень много дублирования и магических чисел.
- Использование глобальных переменных.
- Вся логика игры хранится в 1 классе.
- Название класса не отражает его предназначение.
- Нет наследования с полиморфизмом.
- Нет умных указателей, используется явное выделение памяти, есть утечки.
- Нет использования стандартной библиотеки.

Рекомендую почитать про:
- Перечисления
- Smart pointers и идиому RAII.
- Виртуальные функции и наследование.
- Контейнеры стандартной библиотеки и лямбда функции.

Рекомендуемые книги:
Стивен Пратта. Язык программирования С++. Лекции и упражнения, 5-е изд.
Скот Майерс. Эффективный и современный c++.



[5][Vladislav Zinchenko new]
Нужно лучше выучить:
- Smart pointers и идиому RAII.
- Разделение классов на обьявление и реализауию.
- Когда использовать наследование, что такое полиморфизм и виртуальные функции.
- Возможности стандартной библиотеки.
- Механизм сигналов\слотов в Qt.

Так же нужно улучшить стиль кода, избегать дублирования.

Рекомендуемые книги:
Стивен Пратта. Язык программирования С++.
Скот Майерс. Эффективный и современный c++.


[6][PANASUK YEHOR new]
Нужно лучше выучить:
- Smart pointers и идиому RAII.
- Возможности стандартной библиотеки.
- Когда использовать наследование, что такое полиморфизм и виртуальные функции.
- Как использовать механизм qt сигналов\слотов в коде.

Так же нужно улучшить стиль кода, распределить логику по разным классам, избегать дублирования, использовать перечисления.

Рекомендуемые книги:
Стивен Пратта. Язык программирования С++.
Скот Майерс. Эффективный и современный c++.


[9][YuliaYasnuska]
Не плохие теоретические знания ООП, принципов SOLID. Код тестового задания написан хорошо. Логика игры разделена на отдельные классы.

Есть пробелы в базывых знаниях С++, нужно лучше выучить:
- Классы\структуры и модификаторы наследования.
- Виртуальные функции, таблица виртуальных функций при наследовании.
- Дефолтные методы класса.
- Конструктор копирования/перемещения.
- Порядок инициализации\разрушения полей класса.
- Работу с исключениями и раскрутку стека.
- Smart pointers и идиому RAII.
- Висячие указатели и утечка памяти.
- Разницу между обьявлением и определением.
- Статические члены\методы класса.
- R-value и L-value.
- Этапы компиляции.

Так же рекомендуем поработать с многопоточностью, системными API, изучить более деатльно стандарнтую библотеку, почитать про временную сложность алгоритмов.

Рекомендуемые книги:
- Герберт Шилдт: С++ базовый курс.
- Стивен Пратта. Язык программирования С++.

[10][DmitriySitnikov]
Неплохое понимание qt, есть моментами использование синглтонов, логика игры и интерфейс пользователя выглядят норм.
В коде есть места где бросаются исключения, но нет обработки исключений. Так же нет использования стандартной библиотеки, умных указателей и полиморфизма. Иногда встречаются магические числа.

Нужно лучше выучить:
- Smart pointers и идиому RAII.
- Возможности стандартной библиотеки.
- Работу с исключениями и раскрутку стека.
- Когда использовать наследование, что такое полиморфизм и виртуальные функции.

Рекомендуем почитать базовые книги по языку и стандартной библиотеке, к примеру:
- Герберт Шилдт: С++ базовый курс.
- Стивен Пратта. Язык программирования С++.


[11][DmitryBakhtun]
Нужно лучше выучить:
- Smart pointers и идиому RAII.
- Работу с потоками в связке с мьютексом.
- Возможности стандартной библиотеки, что такое "range-based for loop".
- Когда использовать наследование, что такое полиморфизм и виртуальные функции.
- Как организовавать структуру кода, разделение логики по классам-файлам.
- Как использовать перечисления.
- Как работает препроцессор.

Рекомендуем почитать базовые книги по языку и стандартной библиотеке, к примеру:
- Герберт Шилдт: С++ базовый курс.
- Стивен Пратта. Язык программирования С++.

[12][DemchenkoOleksii]
В коде проекта Asteroids не было продемонстрировано уверенное знание языка, например, нет использования умных указателей, лямбда-функций, обработки исключений. 
Присутствует много ручного управление памятью, в некоторых местах деструктор вызывается явно.

Нужно выучить:
- Smart pointers и идиому RAII.
- Работу с исключениями и раскрутку стека.
- Порядок инициализации\разрушения полей класса, как использовать список инициализации членов класса.
- Когда вызывается конструктор копирования\присваивания.
- Когда вызывается деструктор.
- Перегрузку операторов.
- R-value и L-value.

Рекомендуемые книги:
- Герберт Шилдт: С++ базовый курс.
- Стивен Пратта. Язык программирования С++.


[14][Maksym Tarasenko]
В коде присутствуют магические числа в разных мистах. Не было продемонстрировано знания полиморфизма, работы со стандартной библиотекой (умные указатели, лямбда функции), работу с исключениями. Вся логика находится в "mainwindow" классе. Можно было бы распределить код по классам и использовать наследование или композицию. В проекте нет использования механизма Qt сигналов\слотов.

Рекомендую почитать про:
- Smart pointers и идиому RAII.
- Работу с исключениями и раскрутку стека.
- Виртуальные функции, таблица виртуальных функций при наследовании.
- Механизм сигналов\слотов в Qt.

Рекомендуемые книги:
- Герберт Шилдт: С++ базовый курс.
- Стивен Пратта. Язык программирования С++.

Полезные ссылки:
- RAII:
  (https://learn.microsoft.com/en-us/cpp/cpp/object-lifetime-and-resource-management-modern-cpp?view=msvc-170)
  (https://en.cppreference.com/w/cpp/language/raii)

- Smart pointers:
  (https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170)
  (https://en.cppreference.com/book/intro/smart_pointers)

- Polymorphism:
  (https://www.tutorialspoint.com/cplusplus/cpp_polymorphism.htm)

- Qt signal & slots: (https://doc.qt.io/qt-6/signalsandslots.html)


[Yevhen Hudenko]
Плюсом является разделение логики игры на отдельные классы с применением наследовании и полиморфизма это правильный подход. Анимация игры выглядит неплохо. Частично было продемонстрирована работа с контейнерами и итераторами стандартной библиотеки. Однако в коде присутствует много ручного упраления памятью, для этого есть smart pointers. Так же в коде нет к примеру использования лямбда-функций, обработки исключений.

[Oleksii Chereshniuk]
Весь код написан в одном Source.cpp файле, очень много ненужного дублирования и магических чисел. Логику игры нужно было бы распределить по отдельным класса (например Dealer, Player) каждый из которых выполнял бы свою роль. Соответственно раз нет классов, то нет и наследования с полиморфизмом. Нет использования стандартной библиотеки (контейнеры, умные указатели, ламбда-функции).

Нужно лучше выучить:
- Smart pointers и идиому RAII.
- Возможности стандартной библиотеки, что такое "range-based for loop".
- Когда использовать наследование, что такое полиморфизм и виртуальные функции.
- Когда вызывается конструктор\деструктор.
- Разница между стеком и кучей.
- Как организовавать структуру кода, разделение логики по классам-файлам.
- Как использовать перечисления.
- Как работает препроцессор.

Рекомендуемые книги:
- Герберт Шилдт: С++ базовый курс.
- Стивен Пратта. Язык программирования С++.

Полезные ссылки:
- RAII:
  (https://learn.microsoft.com/en-us/cpp/cpp/object-lifetime-and-resource-management-modern-cpp?view=msvc-170)
  (https://en.cppreference.com/w/cpp/language/raii)

- Smart pointers:
  (https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170)
  (https://en.cppreference.com/book/intro/smart_pointers)

- Polymorphism:
  (https://www.tutorialspoint.com/cplusplus/cpp_polymorphism.htm)


[Ihor Gudzuk] [Cv]
Есть базовое понимание про виртуальные функции, RAII, ООП. Код игры написан довольно неплохо. Есть опыт работы со стандартной библиотекой, лямбдами, потоками. Неплохо описал этапы компиляции (препроцессор и линковка).

Нужно лучше выучить:
- Отличия структура от класса
- Отличия ссылка от указателя
- Модификаторы структуры/класса
- Как работают квалификаторы методов
- Каков порядок конструирования/уничтожения обьектов в иерархии.
- Разница между конструктором копирования и оператором присваивания.
- Виртуальные функции, таблица виртуальных функций при наследовании.
- Что такое раскрутка стека
- Smart pointers

Рекомендуемые книги:
- Герберт Шилдт: С++ базовый курс.
- Стивен Пратта. Язык программирования С++.

Полезные ссылки:
- Smart pointers:
  (https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170)
  (https://en.cppreference.com/book/intro/smart_pointers)

- Polymorphism:
  (https://www.tutorialspoint.com/cplusplus/cpp_polymorphism.htm)


[Yevhen Hudenko] [Cv]
Есть базовое понимание про виртуальные функции, ООП. Код игры написан неплохо, присутствует полиморфизм, UI выглядит хорошо. Есть опыт работы с контейнерами стандартной библиотеки, однако нет использования лямбда функций. В коде пристуствует много ручного управления памятью, т.е. идет работа с raw pointers, что может привести к утечкам памяти. В некоторых местах кода присутствует магические числа (размеры фигур и тд).

Нужно лучше выучить:
- Отличия структуры от класса.
- Отличия ссылки от указателя.
- Smart pointers и идиому RAII.
- Лямбда функции и захват переменных.
- Как работают квалификаторы методов.
- Когда вызывается конструктор копирования.
- Каков порядок конструирования/уничтожения обьектов в иерархии.
- Виртуальные функции, таблица виртуальных функций при наследовании.
- Как работают исключения, что такое раскрутка стека.
- Этапы компиляции, как работает препроцессор.

Рекомендуемые книги:
- Герберт Шилдт: С++ базовый курс.
- Стивен Пратта. Язык программирования С++.

Полезные ссылки:
- RAII:
  (https://learn.microsoft.com/en-us/cpp/cpp/object-lifetime-and-resource-management-modern-cpp?view=msvc-170)
  (https://en.cppreference.com/w/cpp/language/raii)

- Smart pointers:
  (https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170)
  (https://en.cppreference.com/book/intro/smart_pointers)

- Polymorphism:
  (https://www.tutorialspoint.com/cplusplus/cpp_polymorphism.htm)

- Lambda expressions:
  (https://learn.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170)

- Этапы компиляции: 
  (https://habr.com/ru/articles/478124/)

[Olexandr Bortnik]
Классы не разделены на обьявление и определение (бо'льшая часть кода находится в .h файлах). В main.cpp очень много глобальных переменных. Вместо std::unique_lock используется явные вызовы lock\unlock мьютекса. Вместо умных указателей идет ручное управление памяьтю (в том числе в обьявлении полей класса), как следствие - утчеки памяти. Очень много магических чисел. Не былы продемонстрированы знания полиморфизма.

Нужно лучше выучить:
- Smart pointers и идиому RAII.
- Разница между стеком и кучей.
- Лямбда функции и захват переменных.
- Когда вызывается деструктор обьекта в стеке\куче.
- Каков порядок конструирования/уничтожения обьектов в иерархии.
- Виртуальные функции, таблица виртуальных функций при наследовании.
- Как организовавать структуру кода, разделение логики по классам-файлам.
- Как работают исключения, что такое раскрутка стека.

Рекомендуемые книги:
- Герберт Шилдт: С++ базовый курс.
- Стивен Пратта. Язык программирования С++.

Полезные ссылки:
- RAII:
  (https://learn.microsoft.com/en-us/cpp/cpp/object-lifetime-and-resource-management-modern-cpp?view=msvc-170)
  (https://en.cppreference.com/w/cpp/language/raii)

- Smart pointers:
  (https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170)
  (https://en.cppreference.com/book/intro/smart_pointers)

- Polymorphism:
  (https://www.tutorialspoint.com/cplusplus/cpp_polymorphism.htm)

- Lambda expressions:
  (https://learn.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170)

- Multithreading guards:
  (https://radioprog.ru/post/1405)








Herbert Schildt. C++ from the Ground Up. (3rd Edition)
Stephen Prata. C++ Primer Plus. (5th Edition)

